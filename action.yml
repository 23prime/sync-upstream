name: "Sync upstream"
description: "Checks upstream, merges if possible, creates PR if conflicts."

inputs:
  upstream-url:
    description: "GitHub repository URL of the upstream (e.g., https://github.com/owner/repo.git)"
    required: true

  upstream-branch:
    description: "Branch name of the upstream (e.g., main)"
    required: false
    default: "main"

  target-branch:
    description: "Branch name of the target repository to sync (e.g., main)"
    required: false
    default: "main"

  pr-title:
    description: "Pull Request title when creating a PR"
    required: false
    default: "Merge upstream changes"

  pr-body:
    description: "Pull Request body when creating a PR"
    required: false
    default: "This PR merges changes from upstream."

  pr-branch-prefix:
    description: "Branch name prefix when creating a PR"
    required: false
    default: "sync-upstream"

  always-use-pr:
    description: "Always create a pull request instead of direct push (useful for branch protection)"
    required: false
    default: "false"

  user-email:
    description: "Git user.email"
    required: false
    default: "action@github.com"

  user-name:
    description: "Git user.name"
    required: false
    default: "GitHub Action"

  github-token:
    description: "GitHub token"
    required: true

runs:
  using: "composite"
  steps:
    - name: Set up git config
      run: |
        git config --local user.name "$USER_NAME"
        git config --local user.email "$USER_EMAIL"
      shell: bash
      env:
        USER_NAME: ${{ inputs.user-name }}
        USER_EMAIL: ${{ inputs.user-email }}

    - name: Add upstream and fetch
      run: |
        git remote add upstream "$UPSTREAM_URL"
        git fetch upstream "$UPSTREAM_BRANCH"
      shell: bash
      env:
        UPSTREAM_URL: ${{ inputs.upstream-url }}
        UPSTREAM_BRANCH: ${{ inputs.upstream-branch }}

    - name: Checkout target branch
      run: |
        git checkout "$TARGET_BRANCH"
      shell: bash
      env:
        TARGET_BRANCH: ${{ inputs.target-branch }}

    - name: Check for new commits
      id: check-commits
      run: |
        if [ "$(git rev-list --count HEAD..upstream/$UPSTREAM_BRANCH)" -eq 0 ]; then
          echo "HAS_CHANGES=false" >> $GITHUB_ENV
        else
          echo "HAS_CHANGES=true" >> $GITHUB_ENV
        fi
      shell: bash
      env:
        UPSTREAM_BRANCH: ${{ inputs.upstream-branch }}

    - name: Try merge
      id: merge
      if: env.HAS_CHANGES == 'true'
      run: |
        if git merge --allow-unrelated-histories "upstream/$UPSTREAM_BRANCH"; then
          echo "MERGE_SUCCESS=true" >> $GITHUB_ENV
        else
          git add -A
          echo "MERGE_SUCCESS=false" >> $GITHUB_ENV
        fi
      shell: bash
      env:
        UPSTREAM_BRANCH: ${{ inputs.upstream-branch }}

    - name: Push if merged successfully
      if: env.HAS_CHANGES == 'true' && env.MERGE_SUCCESS == 'true' && inputs.always-use-pr == 'false'
      run: |
        git push origin "$TARGET_BRANCH"
      shell: bash
      env:
        TARGET_BRANCH: ${{ inputs.target-branch }}

    - name: Create PR for conflict or when always-use-pr is enabled
      if: env.HAS_CHANGES == 'true' && (env.MERGE_SUCCESS == 'false' || inputs.always-use-pr == 'true')
      uses: peter-evans/create-pull-request@v7
      with:
        token: ${{ inputs.github-token }}
        commit-message: ${{ inputs.pr-title }}
        title: ${{ inputs.pr-title }}
        body: ${{ inputs.pr-body }}
        branch: ${{ inputs.pr-branch-prefix }}-${{ github.run_id }}
        delete-branch: true
